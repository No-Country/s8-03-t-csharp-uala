@page "/home"
@layout DashboardLayout
@attribute [Authorize]

<PageTitle>Alau - Dashboard</PageTitle>
<TitleDesc Title="Dashboard" Description="Visualiza tus movimientos financieros, transacciones y balance"></TitleDesc>
<main class="d-flex flex-column flex-wrap align-center justify-center">
    <div style="width:100%; max-width:900px" class="d-flex flex-column flex-wrap align-center justify-center gap-2">
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <div style="width:90%" class="d-flex flex-column flex-wrap align-center justify-center gap-2">
                <div style="width:100%">
                    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Saldo</MudText>
                    <MudPaper Elevation="1" Class="pa-2">
                        <MudText Typo="Typo.h6">Disponible: @ConvertToCurrencyFormat(9653)</MudText>
                        <MudText Typo="Typo.h6">Invertido: @ConvertToCurrencyFormat(1578)</MudText>
                    </MudPaper>
                </div>


                <div style="width: 100%">
                    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Mis Movimientos</MudText>
                    <MudTable Elevation="1" Style="width:100%" Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="MudBlazor.Color.Primary">
                        <HeaderContent>
                            <MudTh>Nombre</MudTh>
                            <MudTh>Fecha</MudTh>
                            <MudTh>Importe</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                            <MudTd DataLabel="Fecha" HideSmall="_hidePosition">@context.Fecha.ToString("dd-MM-yy")</MudTd>
                            <MudTd DataLabel="Import">@context.Import.ToString("C")</MudTd>
                        </RowTemplate>

                    </MudTable>
                    <div class="d-flex align-center justify-center mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Ver mas Movimientos</MudButton>

                    </div>
                </div>

            </div>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <div style="width:90%" class="d-flex flex-row flex-wrap align-start justify-space-between gap-2">
                <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Mis Movimientos</MudText>
                <div style="width: 75%">
                    <MudTable Elevation="1" Style="width:100%" Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="MudBlazor.Color.Primary">
                        <HeaderContent>
                            <MudTh>Nombre</MudTh>
                            <MudTh>Fecha</MudTh>
                            <MudTh>Importe</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                            <MudTd DataLabel="Fecha" HideSmall="_hidePosition">@context.Fecha.ToString("dd-MM-yy")</MudTd>
                            <MudTd DataLabel="Import">@context.Import.ToString("C")</MudTd>
                        </RowTemplate>

                    </MudTable>
                    <div class="d-flex align-center justify-center mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary">Ver mas Movimientos</MudButton>
                    </div>
                </div>
                <MudPaper Elevation="1" Style="width:20%" Class="pa-2">
                    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-2">Saldo</MudText>
                    <MudText Typo="Typo.body1">Disponible: @ConvertToCurrencyFormat(965)</MudText>
                    <MudText Typo="Typo.body1">Invertido: @ConvertToCurrencyFormat(1578)</MudText>
                </MudPaper>
            </div>
        </MudHidden>


        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudPaper Elevation="0" Width="90%" Class="back-gray d-flex flex-row justify-center align-center flex-wrap pa-2 gap-2">
                <MudText Style="width:100%" Typo="Typo.h5" Color="Color.Primary">Analisis de Gastos</MudText>
                <MudChart ChartType="MudBlazor.ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
                        <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="4">@data.Sum().ToString("C")</text>
                    </CustomGraphics>
                </MudChart>
            </MudPaper>

            <div>
                <MudText Typo="Typo.h5" Color="Color.Primary">Mis Ganancias</MudText>
                <div>
                    @if (Orders.Count > 0)
                    {
                        <ApexCharts.ApexChart TItem="GananciaModelTest"
                                              Title="Order Net Value">

                            <ApexCharts.ApexPointSeries TItem="GananciaModelTest"
                                                        Items="Orders"
                                                        Name="Gross Value"
                                                        XValue="@(e => e.XAxisLabels)"
                                                        YAggregate="@(e => e.Sum(e => e.Value))"
                                                        SeriesType="ApexCharts.SeriesType.Bar"
                                                        Color="#005ba3" />
                        </ApexCharts.ApexChart>
                    }

                </div>
            </div>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
            <div style="width:90%" Class="d-flex flex-row justify-space-between align-start flex-wrap pa-2 gap-2">
                <MudPaper Elevation="0" Width="45%" Class="back-gray d-flex flex-row justify-center align-center flex-wrap pa-2 gap-2">
                    <MudText Style="width:100%" Typo="Typo.h5" Color="Color.Primary">Analisis de Gastos</MudText>
                    <MudChart ChartType="MudBlazor.ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
                        <CustomGraphics>
                            <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
                            <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="4">@data.Sum().ToString("C")</text>
                        </CustomGraphics>
                    </MudChart>
                </MudPaper>

                <div>
                    <MudText Typo="Typo.h5" Color="Color.Primary">Mis Ganancias</MudText>
                    <div>
                        @if (Orders.Count > 0)
                        {
                            <ApexCharts.ApexChart TItem="GananciaModelTest"
                                                  Title="">

                                <ApexCharts.ApexPointSeries TItem="GananciaModelTest"
                                                            Items="Orders"
                                                            Name="Gross Value"
                                                            XValue="@(e => e.XAxisLabels)"
                                                            YAggregate="@(e => e.Sum(e => e.Value))"
                                                            SeriesType="ApexCharts.SeriesType.Bar"
                                                            Color="#005ba3" />
                            </ApexCharts.ApexChart>
                        }

                    </div>
                </div>

            </div>
        </MudHidden>




    </div>
</main>


@code {
    // Chart Donut
    public double[] data = { new Random().Next(2350), new Random().Next(5400), new Random().Next(2800), new Random().Next(5563) };
    public string[] labels = { "Servicios", "Compras", "Entretenimientos", "Sin Categorias" };
    //Table
    private bool _hidePosition = true;
    private bool _loading;
    private ICollection<Element> Elements = new List<Element>();
    //Chart Bar
    //private int Index = 0; //default value cannot be 0 -> first selectedindex is 0.
    //public List<ChartSeries> Series = new List<ChartSeries>()
    //{
    //    new ChartSeries() { Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
    //};
    //public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };
    private List<GananciaModelTest> Orders = new List<GananciaModelTest>();

    protected override void OnInitialized()
    {
        Element e1 = new Element()
            {
                Nombre = "Youtube",
                Import = new Random().Next(21365),
                Fecha = new DateTime(2023, 03, 14)
            };
        Element e2 = new Element()
            {
                Nombre = "HBOmax",
                Import = new Random().Next(690),
                Fecha = new DateTime(2023, 03, 14)
            };

        GananciaModelTest A1 = new GananciaModelTest()
            {
                XAxisLabels = "Jan",
                Value = new Random().Next(100)
            };
        GananciaModelTest A2 = new GananciaModelTest()
            {
                XAxisLabels = "Feb",
                Value = new Random().Next(100)
            };
        GananciaModelTest A3 = new GananciaModelTest()
            {
                XAxisLabels = "Mar",
                Value = new Random().Next(100)
            };
        Elements.Add(e1);
        Elements.Add(e2);
        Orders.Add(A1);
        Orders.Add(A2);
        Orders.Add(A3);
        StateHasChanged();
    }

    // Convert numbers type double in numbers price
    private string ConvertToCurrencyFormat(int number)
    {
        return $"${new Random().Next(number):n0}";
    }

}